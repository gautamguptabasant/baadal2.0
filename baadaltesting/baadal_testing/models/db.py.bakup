# -*- coding: utf-8 -*-
###################################################################################
# Added to enable code completion in IDE's.
if 0:
    from gluon import *  # @UnusedWildImport
    from applications.new_baadal_testing.models import *  # @UnusedWildImport
###################################################################################
from ast import literal_eval
from datetime import timedelta
from gluon.tools import Auth, Service, PluginManager
import os, re, random

def get_context_path():
    ctx_path = os.path.abspath(os.path.join(os.path.dirname(os.path.abspath(__file__)),'..'))
    return ctx_path

def get_datetime():
    import datetime
    return datetime.datetime.now()

def get_config_file():

    import ConfigParser    
    config = ConfigParser.ConfigParser()
    config.read(os.path.join(get_context_path(), 'static/baadalapp.cfg'));
    return config

config = get_config_file()

db_type = config.get("GENERAL_CONF","database_type")
conn_str = config.get(db_type.upper() + "_CONF", db_type + "_conn")
print db_type.upper() + "_CONF", db_type + "_conn"
print conn_str
db = DAL("mysql://root:baadal@127.0.0.1/baadal_testing")
print db
db.define_table('task_queue',
    Field('ip_addr', 'string', length = 30, notnull = True),
    Field('task_type', 'string',length = 30,notnull = True),
    Field('requester_type', 'string',length = 30,notnull = True),
    Field('priority', 'integer', default = 1, notnull = True),
    Field('email_id','string',length = 50)
    )

db.define_table('task_queue_event',
    Field('task_id', 'integer', notnull = True),
    Field('task_type', 'string', length = 30, notnull = True),
    Field('status', 'string', length = 30, notnull = True),
    Field('start_time', 'datetime', default = get_datetime()),
    Field('end_time', 'datetime'),
    Field('email_id','string',length = 50)
    )


auth = Auth(db)
service = Service()
plugins = PluginManager()

###############################################################################
auth.define_tables(username = True)
###############################################################################
if current.auth_type == AUTH_TYPE_LDAP :
    from gluon.contrib.login_methods.pam_auth import pam_auth
    auth.settings.login_methods = [pam_auth()]
    auth.settings.login_onaccept = [login_ldap_callback]
else:
    auth.settings.login_onaccept = [login_callback]
    auth.settings.registration_requires_approval = True
###############################################################################


from gluon.tools import Mail
mail = Mail()
if config.getboolean("MAIL_CONF","mail_active"):
    mail.settings.server = config.get("MAIL_CONF","mail_server")
    mail.settings.sender = config.get("MAIL_CONF","mail_sender")
    mail.settings.login = config.get("MAIL_CONF","mail_login")
    mail.settings.tls = literal_eval(config.get("MAIL_CONF","mail_server_tls"))
## create all tables needed by auth if not custom tables
auth.define_tables(username=False, signature=False)
'''
## configure email
mail = auth.settings.mailer
mail.settings.server = 'logging' if request.is_local else 'smtp.gmail.com:587'
mail.settings.sender = 'you@gmail.com'
mail.settings.login = 'username:password'
## configure auth policy
auth.settings.registration_requires_verification = False
auth.settings.registration_requires_approval = False
auth.settings.reset_password_requires_verification = True'''
