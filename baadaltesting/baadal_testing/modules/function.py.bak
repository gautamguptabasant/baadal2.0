import random
import time
import datetime
import os
import thread
import paramiko
import logging
import logging.config
from helper import *
#creating a my_logger for logging the records
#my_logger = logging.getmy_logger("web2py.app.baadal")

#creating connection to remote system
ssh = paramiko.SSHClient()
ssh.set_missing_host_key_policy(paramiko.AutoAddPolicy())

username_list=["BaadalUF UF","Baadal UA","Baadal UO","Badal UFA","Baadal UFO","Baadal UOA","BaadalUFOA UFOA","BaadalU U"]

usrnm_list={"badalUF":"BaadalUF UF","badalUA":"Baadal UA","badalUO":"Baadal UO","badalUFA":"Baadal UFA","badalUFO":"Baadal UFO","badalUOA":"Baadal UOA","badalUFOA":"BaadalUFOA UFOA","badalU":"BaadalU U"}

#list of operation to be performed     
op_list={'revert_to_snapshot':0,'delete_snapshot':1,'snapshot':'Snapshot VM','pause_machine':'Suspend VM','Delete':'Delete VM','shutdown_machine':'Stop VM','destroy_machine':'Destroy VM','start_machine':'Start VM','user_details':'Add User','attach_extra_disk':"Attach Disk",'clone_vm':'Clone ','delete_user_vm':'Delete User','adjrunlevel':'Adjust Run Level','edit_vm_config':'Edit VM Config','resume_machine':'Resume VM','migrate_vm':'Migrate VM'}

###############################################################################################################
#                             Functions used by the input field functions                                     #
###############################################################################################################		

#checking whether front end data and daatabase entries are equal and printing the result 		
def print_result(field_text,result,xml_child,my_logger):
	
	query_result=str(result)
        my_logger.debug("screen=  "+str(field_text) )
        my_logger.debug("db=      "+query_result)
	if str(field_text)==str(query_result):
		my_logger.debug(xml_child.get("value") +': Result:correct input') 
		
	else:
		my_logger.error(xml_child.get("value") +': Result:Incorrect input')

	return 


def total_user(driver,xml_sub_child,xml_child,vm_name,vm_id,my_logger):
    my_logger.debug("############total user")
    vm_user_list=[] 
    click_on_setting(driver,xml_sub_child,xml_child,vm_name,vm_id,my_logger)
    path="//table[@id='vm_users']/tbody/tr/td"
    if isTablePresent(driver,xml_child,path,my_logger):
	field=driver.find_elements_by_xpath(path)
	count=0
	for user in field:
	     vm_user_list.insert(count,user.text)
	     count+=1
    my_logger.debug(vm_user_list)
    return vm_user_list

# checking whether an element is present on the webpage without writting it to log
def isPresent(driver,xpath,my_logger):
    my_logger.debug("Inside isPresent")
    try:
        driver.find_element_by_xpath(xpath)
        my_logger.debug("inside try block")
        return 1
    except:
        my_logger.debug("inside except block")
        return 0

# checking whether an element is present on the webpage
def isElementPresent(driver,xml_child,xpath,my_logger):
    my_logger.debug("inside isElementPresent")
    try:
        driver.find_element_by_xpath(xpath)
        my_logger.debug(xml_child.get("value") +': Result:element exists')
        return 1
    except:
        my_logger.debug(xml_child.get("value") +': Result:no element exists')
        return 0
   
# checking whether a table is present on the webpage
def isTablePresent(driver,xml_child,xpath,my_logger):
    my_logger.debug("inside isTablePresent")
    try:
        driver.find_element_by_xpath(xpath)
        my_logger.debug(xml_child.get("value") +': Result:table exists')
        return 1
    except:
        my_logger.debug(xml_child.get("value") +': Result:no table exists')
        return 0	
   

def time_to_check_in_tasktable(my_logger):
    current_time=datetime.datetime.now()
    break_pt_time=current_time + datetime.timedelta(seconds=220) 
    print datetime.datetime.now()
    print break_pt_time 
    time.sleep(60)
    return 

def check_pendingtasks_table(driver,xml_sub_child,xml_child,vm_name,operation_name,vm_user_list,my_logger):
    my_logger.debug("inside check_pendingtasks_table")
    task_table_name="Pending Task"
    driver.find_element_by_partial_link_text("Tasks").click()
    path_row="//table[@id='pendingtasks']/tbody/tr"
    path_col="//table[@id='pendingtasks']/tbody/tr/td"
    path_header="//table[@id='pendingtasks']/tbody/tr/th"
    data1=[]
     
    if isTablePresent(driver,xml_child,xpath,my_logger):
        countp=0
        c_count=0
        vm_name_s=""
        select_row=0
        field_header=driver.find_elements_by_xpath(path_header)
        counth=0
        for h_data in field_header:
            if h_data.text=="Task":
                task_f_no=counth
            if h_data.text=="VM":
                vm_f_no=counth
            if h_data.text=="Requested By":
                requester_f_no=counth
            if h_data.text=="Request Time":
                request_f_no=counth
            counth+=1
        col_count=counth	
        field=driver.find_elements_by_xpath(path_col)	
        for data in field:	    
            if c_count%col_count==task_f_no:
                op_name_sc=data.text
		
            if c_count%col_count==vm_f_no:
                vm_name_s=data.text
		
            if c_count%col_count==requester_f_no:
		 if data.text in vm_user_list:
		     user_name_s=data.text
		     select_row=1            	    
            if (c_count%col_count==request_f_no):
                start_time_s=data.text	    
            if (select_row) & (c_count%col_count==(col_count-1)):
                if (str(vm_name)==str(vm_name_s)) & (str(operation_name)==str(op_name_sc)):
                    data1.append([])
		    data1[-1].append(start_time_s)
                    data1[-1].append(user_name_s)
		    data1[-1].append(task_table_name)		    
                    countp+=1
            c_count+=1	    
    else:
        countp=0  
    return data1


def vm_list_all_vm(xml_child,xml_sub_child,driver,my_logger):
    my_logger.debug("Inside vm_list")
    data1=[]
    path_col="//table[@id='listallvm']/tbody/tr/td"
    path_row="//table[@id='listallvm']/tbody/tr"
    path_header="//table[@id='listallvm']/thead/tr/th"	
    if isTablePresent(driver,xml_child,path_col,my_logger):
        my_logger.debug("vm_list table present")
        countc=0
        c_count=0
        r_count=0
        select_row=0
        header_field=driver.find_elements_by_xpath(path_header)
        count=0
        for hdata in header_field:
            if hdata.text=="Name":
                vm_name_no=count
            if hdata.text=="Owner":
                user_name_no=count
            if hdata.text=="Status":
                status_no=count
            if hdata.text=="Host":
                host_no=count
            count+=1
        col_count=count
        field=driver.find_elements_by_xpath(path_col)
        for data in field:
            my_logger.debug(data.text)
            if c_count%col_count==vm_name_no:
                vm_name=data.text
                
            if c_count%col_count==user_name_no:
                my_logger.debug("inside"+ data.text)
                for username in username_list:
                    if username in data.text:
                        user_name=data.text
                        my_logger.debug("username" + str(data.text))
                        select_row=1
                        break
            if c_count%col_count==status_no:
                status=data.text
            if c_count%col_count==host_no:
                host=data.text   
            if (c_count%col_count==col_count-1):
                my_logger.debug("select row : "+str(select_row))
                if select_row:
                    my_logger.debug("inside select row")
                    field_data=driver.find_elements_by_xpath(path_row)
                    vm_id=data.get_attribute("id")
                    print vm_id
                    countc+=1
                    break       
            c_count+=1       
    if countc==0:
        print "No user of testing User.Please Create a VM!!!!"
        logger.debug("No user of testing User.Please Create a VM!!!!")
        vm_name=""
        vm_id=""
        host=""
    data1.insert(0,vm_id)
    data1.insert(1,vm_name)
    data1.insert(2,host)
    my_logger.debug(data1)
    return data1

# Function to find VM id of a given VM with name
def find_vm_id(driver,xml_child,xml_sub_child,vm_name1):
    print "Inside vm_list"
    data1=[]
    path_col="//table[@id='listallvm']/tbody/tr/td"
    path_row="//table[@id='listallvm']/tbody/tr"
    path_header="//table[@id='listallvm']/thead/tr/th"
    
	
    if isTablePresent(driver,xml_child,path_col):
        print "vm_list table present"
        countc=0
        c_count=0
        r_count=0
        select_row=0
        select=0
        header_field=driver.find_elements_by_xpath(path_header)
        count=0
        for hdata in header_field:
            if hdata.text=="Name":
                vm_name_no=count
            if hdata.text=="Owner":
                user_name_no=count
            if hdata.text=="Status":
                status_no=count
            if hdata.text=="Host":
                host_no=count
            count+=1
        col_count=count
        field=driver.find_elements_by_xpath(path_col)
        print vm_name_no
        print user_name_no
        print status_no
        print host_no
        for data in field:
            print data.text
            if c_count%col_count==vm_name_no:
                vm_name=data.text
                if vm_name == vm_name1:
                    select=1
                
            if c_count%col_count==user_name_no:
                print "inside"+data.text
                for username in username_list:
                    if username==data.text:
                        user_name=data.text
                        print "username" + str(data.text)
                        select_row=1
                        break
            if c_count%col_count==status_no:
                status=data.text
            if c_count%col_count==host_no:
                host=data.text   
            if (c_count%col_count==col_count-1):
                print "select row : "+str(select_row)
                if select_row and select:
                    print "inside select row"
                    field_data=driver.find_elements_by_xpath(path_row)
                    vm_id=data.get_attribute("id")
                    print vm_id
                    countc+=1
                    break       
            c_count+=1       
    if countc==0:
        print "No user of testing User.Please Create a VM!!!!"
        logger.debug("No user of testing User.Please Create a VM!!!!")
        vm_name=""
        vm_id=""
        host=""
    data1.insert(0,vm_id)
    data1.insert(1,vm_name)
    data1.insert(2,host)
    print data1
    return data1


#perform action on setting button of vm's
def click_on_setting(driver,xml_sub_child,xml_child,vm_name,vm_id,my_logger):
    my_logger.debug("inside click on setting")
    path="//*[@href='/user/settings/"+ str(vm_id) +"']"
    print path
    if isElementPresent(driver,xml_child,path,my_logger):
        driver.find_element_by_xpath(path).click()
        my_logger.debug(xml_child.get("value") +': Result:Setting button is working properly') 
    else:
        my_logger.debug(xml_child.get("value") +': Result:Setting button is not working properly')
    
    return
    
    
    
#open dialogbox when error occurs in falied tasks            
def click_on_dialogbox(driver):
    try:
        alert = driver.switch_to_alert()
        alert.accept()
        return 1
    except:
        return 0

    
#for executing sql-query			
def execute_query(baadal_db,sql_query,arg=None):
    cursor=baadal_db.cursor()    
    if arg==None:
        cursor.execute(sql_query)
    else:
        cursor.execute(sql_query,arg)

    return cursor 
		
##############################################################################################################
#                              Function for checking wether pending task list is Empty or not                #
##############################################################################################################
def checkPendingTask(driver,my_logger):
    flag=0
    my_logger.debug("Inside checkPendingTask")
    start=time.time()
    end=start+10
    xpath="//div[@id='pendTab']/h3"
    driver.find_element_by_xpath("//a[@href='/baadal/admin/task_list']").click()
    while start<end:
        time.sleep(10)
        driver.refresh()
        print('driver.refresh() done')
        time.sleep(10)
        my_logger.debug("Entering")
        if isPresent(driver,xpath,my_logger):
            flag=1
            my_logger.debug("Pending Task Empty")
            break
        my_logger.debug("isPresent False")
        start=time.time()
    #End of loop
    return flag

##############################################################################################################
#  					           functions for various types of input fields  				          	     #
##############################################################################################################
				
def isInput(driver, xml_sub_child,my_logger):
    my_logger.debug("inside isInput")
    current_time=datetime.datetime.now().strftime("%Y-%m-%d_%H-%M-%S")
    field = driver.find_element_by_id(xml_sub_child.get("id"))
    if xml_sub_child.text!=None:
        field.send_keys(xml_sub_child.text) # sending the user name/password/vm name/purpose etc
    else:
        if not (xml_sub_child.get("id") in ["user_password","user_username"]):
            field.send_keys(str(current_time))	
    return current_time

def isSubmit( driver, xml_parent, xml_child, xml_sub_child,my_logger):
    driver.find_element_by_xpath(xml_sub_child.text).click()
    time.sleep(10)    
    if xml_sub_child.get("id")=="check_data":
        xpath=xml_sub_child.get("xpath")
        status=isElementPresent(driver,xml_child,xpath,my_logger)

        if status==1:
            my_logger.debug(str(xml_child.get("value")) +": Correct data")
        else:
            my_logger.debug(str(xml_child.get("value")) +": Incorrect data")
    return

	
def isScroll(driver, xml_sub_child,my_logger):
	field=driver.find_element_by_tag_name("html")
	field.send_keys(xml_sub_child.text)
	driver.execute_script("window.scrollBy(0,200)", "")
	return

def isHref(driver, xml_sub_child,xml_child,my_logger):
    driver.find_element_by_partial_link_text(xml_sub_child.text).click()
    if xml_sub_child.get("id")=="collaborator":
        xpath=xml_sub_child.get("xpath")
        if isElementPresent(driver,xml_child,table_path,my_logger):
         
            field=driver.find_element_by_xpath(xpath)    
            result=xml_sub_child.get("result")
            field_text=field.get_attribute("innerHTML")
            print_result(field_text,result,xml_child,my_logger)
	    my_logger.error(xml_child.get("value")  + ": corrent enrty in form")
        else:
            my_logger.error(xml_child.get("value")  + ": Error in the form")
	return

def isInput_add(driver, xml_sub_child,xml_child,my_logger):
    my_logger.debug(xml_sub_child.get("user_id"))
    path=xml_sub_child.get("user_id")   
    field = driver.find_element_by_id(path) 
    my_logger.debug(xml_sub_child.get("user_id_data"))  
    field.send_keys(xml_sub_child.get("user_id_data"))
    return

def isButton_add(driver, xml_sub_child,value,xml_child,my_logger):
    my_logger.debug("inside isButton")
    if isElementPresent(driver,xml_child,value,my_logger):
        my_logger.debug("inside checking element ")
    	driver.find_element_by_xpath(value).click()    
    return

#add extra disk to a VM
def add_extra_disk(driver,xml_sub_child,xml_child,vm_name,vm_id,my_logger):
    isInput_add(driver, xml_sub_child,xml_child,my_logger)
    value=xml_sub_child.get("add_button")
    my_logger.debug("value is : " + str(value))
    isButton_add(driver, xml_sub_child,value,xml_child,my_logger)
    
    return
###############################################################################################################

#message display on screen
def message_in_db(xml_sub_child,my_logger):
    print "inside msg_in_db"
    print op_list
    op_name=xml_sub_child.get("op")
    print op_name
    if op_name=="user_details":
        result="User is added to vm" 
    else:
        print "inside msg in db else"
    	result=op_list[op_name] +" request added to queue."
    	
	return result

#retreiving message from given xpath        
def message_flash( driver,xml_sub_child,xml_child,my_logger):
    path=driver.find_element_by_xpath('//flash[@id="flash_message"]')
    field_text=path.text
    return field_text

def task_path(xml_sub_child,my_logger):
    op_name=xml_sub_child.get("op")
    if op_name=="pause_machine":
        path='Suspend this Virtual Machine'    
    if op_name=="shutdown_machine":
        path='Gracefully shut down this virtual machine'
    if op_name=="start_machine":
        path='Turn on this virtual machine'    
    if op_name=="destroy_machine":
    	path='Forcefully power off this virtual machine'        
    if op_name=="resume_machine":
        path='Unpause this virtual machine'
    return path
       
def compare_task_table(driver,xml_sub_child,xml_child,vm_name,operation_name,task_value,task_n_value,my_logger):	
	value_present=1
	for value in task_n_value:  
	    for value1 in task_value:		
		if (value[0]==value1[0]) & (value[1]==value1[1]):
		    value_present=0
		    break
	    if value_present:
			print value
            print value[2]	
	my_logger.debug("Your Request is in "+ str(value[2]))
	if value[2]=="Failed Tasks":
	    start_time=value[0]	   
	    check_in_failed_task_table(driver,xml_sub_child,xml_child,vm_name,operation_name,start_time)


#################################################################################################################

def perform_task_operation(driver,xml_sub_child,xml_child,vm_name,operation_name,my_logger):
    print "inside perform_task_operation"
    pending_task=check_pendingtask_table(driver,xml_sub_child,xml_child,vm_name,operation_name,my_logger)
    my_logger.debug("pending tasks : " + str(pending_task))
    task_value=check_completedtask_table(driver,xml_sub_child,xml_child,vm_name,operation_name,my_logger)
    my_logger.debug("complete tasks : " + str(task_value))
    failed_task=check_failedtask_table(driver,xml_sub_child,xml_child,vm_name,operation_name,my_logger)
    my_logger.debug("failed tasks : " + str(failed_task))
    return task_value

def perform_vm_operation(driver,xml_sub_child,xml_child,vm_name,operation_name,my_logger):
    print "inside perform_vm_operation"
    failed_task=check_failedtask_table(driver,xml_sub_child,xml_child,vm_name,operation_name,my_logger)
    my_logger.debug("failed tasks : " + str(failed_task))
    return failed_task

def check_pendingtask_table(driver,xml_sub_child,xml_child,vm_name,operation_name,my_logger):
    print "Inside check_pendingtask_table"
    task_table_name="Pending Task"
    driver.find_element_by_partial_link_text("Tasks").click()
    path_row="//table[@id='pendingtasks']/tbody/tr"
    path_col="//table[@id='pendingtasks']/tbody/tr/td"
    path_header="//table[@id='pendingtasks']/tbody/tr/th"
    pcount=check_tasktable(driver,xml_sub_child,xml_child,vm_name,operation_name,task_table_name,path_row,path_col,path_header)
    return pcount

task_data=[]

def check_tasktable(driver,xml_sub_child,xml_child,vm_name,operation_name,task_table_name,path_row,path_col,path_header,my_logger):
    print "inside check_tasktable"
    if isTablePresent(driver,xml_child,path_col):
        countp=0
        c_count=0
        vm_name_s=""
        select_row=0
        field_header=driver.find_elements_by_xpath(path_header)
        counth=0
        for h_data in field_header:
            if h_data.text=="Task":
                task_f_no=counth
            if h_data.text=="VM":
                vm_f_no=counth
            if h_data.text=="Requested By":
                requester_f_no=counth
            if h_data.text=="Request Time":
                request_f_no=counth
            counth+=1
        col_count=counth	
        field=driver.find_elements_by_xpath(path_col)	
        for data in field:	    
            if c_count%col_count==task_f_no:
                op_name_sc=data.text		
            if c_count%col_count==vm_f_no:
                vm_name_s=data.text		
            if c_count%col_count==requester_f_no:		 
		 usernm=usrnm_list[xml_child[0].text]
            	 if usernm==data.text:		     
		     user_name_s=data.text
		     select_row=1	    
            	    
            if (c_count%col_count==request_f_no):
                start_time_s=data.text	    	
            if (select_row) & (c_count%col_count==(col_count-1)):
                if (str(vm_name)==str(vm_name_s)) & (str(operation_name)==str(op_name_sc)):
                    task_data.append([])
		    task_data[-1].append(start_time_s)
                    task_data[-1].append(user_name_s)
		    task_data[-1].append(task_table_name)		    
                    countp+=1
            c_count+=1	    
    else:
        countp=0	
    if countp==0:
	my_logger.debug("No operation exists in" +str(task_table_name) +" table!!!!!")
    else:
	my_logger.debug(str(countp) + " same operation exists in " +str(task_table_name) +"  table!!!")
    
    return task_data


def check_completedtask_table(driver,xml_sub_child,xml_child,vm_name,operation_name,my_logger):
    print "inside check_completedtask_table"
    task_table_name="Completed Task"
    driver.find_element_by_partial_link_text("Tasks").click()
    driver.find_element_by_partial_link_text("Completed Tasks").click()
    path_row="//table[@id='completedtasks']/tbody/tr"
    path_col="//table[@id='completedtasks']/tbody/tr/td"
    path_header="//table[@id='completedtasks']/tbody/tr/th"
    ccount=check_tasktable(driver,xml_sub_child,xml_child,vm_name,operation_name,task_table_name,path_row,path_col,path_header,my_logger)
    return ccount


def check_failedtask_table(driver,xml_sub_child,xml_child,vm_name,operation_name,my_logger):
    print "inside check_failedtask_table"
    task_table_name="Failed Task"
    driver.find_element_by_partial_link_text("Failed Tasks").click()
    path_row="//table[@id='failedtasks']/tbody/tr"
    path_col="//table[@id='failedtasks']/tbody/tr/td"
    path_header="//table[@id='failedtasks']/tbody/tr/th"
    fcount=check_tasktable(driver,xml_sub_child,xml_child,vm_name,operation_name,task_table_name,path_row,path_col,path_header,my_logger)
    return fcount

#################################################################################################################

def check_status_of_vm(driver,xml_sub_child,xml_child,my_logger):
    c_count=0
    path_col="//table[@id='configuration']/tbody/tr/td"
    path_header="//table[@id='configuration']/tbody/tr/th"
    if isTablePresent(driver,xml_child,path_col,my_logger):
        field_header=driver.find_elements_by_xpath(path_header)
        counth=0
        for h_data in field_header:
            if h_data.text=="Status":
                status_f_no=counth
            counth+=1
        col_count=counth
        field=driver.find_elements_by_xpath(path_col)
	
        for data in field:
	    if c_count%col_count==status_f_no:
                status=data.text
	    c_count+=1
	
    return status

        
#getting user id of a user access to a VM                        
def get_user_id(driver,xml_sub_child,xml_child,vm_name,baadal_db,my_logger):
    query_result=execute_query( xml_sub_child.get("query_user_id"),(str(vm_name))).fetchone()
    baadal_db.commit()
    field=driver.find_elements_by_xpath(xml_sub_child.get("xpath_user"))
    for t in field:
        if str(query_result[1]) in t.text:
            user_id=query_result[0]
            my_logger.debug("user_id :" + " " + str(user_id))
    return user_id



#Checking data in Snapshot table  
                                                
def check_snapshot(vm_name,driver,xml_child,xml_sub_child,baadal_db,my_logger):
    my_logger.debug("Checking for entries in current snapshot table")
    path=xml_sub_child.get("xpath_snap")
    if isElementPresent(driver,xml_child,path,my_logger):
        query_result=execute_query(xml_sub_child.get("query4"),(str(vm_name))).fetchall()
        baadal_db.commit()
        total_snap=len(query_result)
        field=driver.find_elements_by_xpath(path)
        result_setting_page(field,query_result,driver,xml_child,xml_sub_child,my_logger)
        return total_snap
    else :
        total_snap=""
        return total_snap


def migrate_on_specific_host(driver,xml_sub_child,xml_child,vm_name,vm_id, host):
    print "inside operation_on_migrate_vm"
    limit =0
    click_on_setting(driver,xml_sub_child,xml_child,vm_name,vm_id)
    path="//a[@title='Migrate this virtual machine']"
    if isElementPresent(driver,xml_child,path):
	print "vm exist"
	driver.find_element_by_partial_link_text("All VMs").click()
        vm_user_list=total_user(driver,xml_sub_child,xml_child,vm_name,vm_id,my_logger)
        operation_name="Migrate VM"
	total=check_pendingtasks_table(driver,xml_sub_child,xml_child,vm_name,operation_name, vm_user_list)
        driver.find_element_by_partial_link_text("All VMs").click()
	print "again clicked all vms"
	click_on_setting(driver,xml_sub_child,xml_child,vm_name,vm_id)
	status=check_status_of_vm(driver,xml_sub_child,xml_child)
	print status+" status"
	driver.find_element_by_xpath("//a[@title='Migrate this virtual machine']").click()
	print "live migration"
        message=message_flash(driver,xml_sub_child,xml_child)
        print message
        message=str(message)
        if message=="No host available right now":
                sys.exit()
        else:
            driver.find_element_by_xpath("//input[@name='live_migration']").click()
            print "//table/tbody/tr/td/select/option[text()='"+str(host)+"]'"
            driver.find_element_by_xpath("//table/tbody/tr/td/select/option[text()='"+str(host)+"']").click()

            driver.find_element_by_xpath("//input[@value='Migrate']").click()
	if total:
	    result="Your request already in the queue"
	    field_text=message_flash(driver,xml_sub_child,xml_child)
            print_result(field_text,result,xml_child,my_logger)
	else:
           result="Your task has been queued. please check your task list for status. "
           field_text=message_flash(driver,xml_sub_child,xml_child)
           print field_text
           print_result(field_text,result,xml_child,my_logger)
           print print_result
           limit=1
	print "migration done"
    else:
	print "Migrate operation could not performed because no host is available.Please do host up then again try this operation"
        logger.debug("Migrate operation could not performed because no host is available.Please do host up then again try this operation")

    return limit


def check_task_task_report(driver,xml_sub_child,xml_child,vm_name,operation_name):
    i=1
    j=0
    driver.find_element_by_link_text("Tasks").click()
    print i
    while i:
       local_list=check_pendingtask_table_status(driver,xml_sub_child,xml_child,vm_name,operation_name)
       i=len(local_list)
       print "still in pending task"
       print i
    local_list=check_completedtask_table(driver,xml_sub_child,xml_child,vm_name,operation_name)
    i=len(local_list)
    if i>j:
       return True
    else:
       return False

def check_pendingtask_table_status(driver,xml_sub_child,xml_child,vm_name,operation_name):
    print "Inside check_pendingtask_table"
    task_table_name="Pending Task"
    driver.refresh()
    time.sleep(5)
    path_row="//table[@id='pendingtasks']/tbody/tr"
    path_col="//table[@id='pendingtasks']/tbody/tr/td"
    path_header="//table[@id='pendingtasks']/tbody/tr/th"
    pcount=check_tasktable(driver,xml_sub_child,xml_child,vm_name,operation_name,task_table_name,path_row,path_col,path_header)
    return pcount
