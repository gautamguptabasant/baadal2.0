# -*- coding: utf-8 -*-
###################################################################################
# Added to enable code completion in IDE's.
if 0:
    from gluon import *  # @UnusedWildImport
    from applications.baadal_testing.models import *  # @UnusedWildImport
###################################################################################

from datetime import timedelta
from gluon.tools import Auth, Service, PluginManager
import os, re, random

def get_context_path():
    ctx_path = os.path.abspath(os.path.join(os.path.dirname(os.path.abspath(__file__)),'..'))
    return ctx_path

def get_datetime():
    import datetime
    return datetime.datetime.now()

def get_config_file():

    import ConfigParser    
    config = ConfigParser.ConfigParser()
    config.read(os.path.join(get_context_path(), 'static/baadalapp.cfg'));
    return config

config = get_config_file()


db_type = config.get("GENERAL_CONF","database_type")
conn_str = config.get(db_type.upper() + "_CONF", db_type + "_conn")
#db = DAL(conn_str,fake_migrate_all=True)
db = DAL(conn_str)

db.define_table('task_queue',
    Field('ip_addr', 'string', length = 30, notnull = True),
    Field('task_type', 'string',length = 30,notnull = True),
    Field('requester_type', 'string',length = 30,notnull = True),
    Field('priority', 'integer', default = 1, notnull = True),
    )



db.define_table('task_queue_event',
    Field('task_id', 'integer', notnull = True),
    Field('task_type', 'string', length = 30, notnull = True),
    Field('status', 'string', length = 30, notnull = True),
    Field('start_time', 'datetime', default = get_datetime()),
    Field('end_time', 'datetime'))



auth = Auth(db)
service = Service()
plugins = PluginManager()

## create all tables needed by auth if not custom tables
auth.define_tables(username=False, signature=False)

## configure email
mail = auth.settings.mailer
mail.settings.server = 'logging' if request.is_local else 'smtp.gmail.com:587'
mail.settings.sender = 'you@gmail.com'
mail.settings.login = 'username:password'
## configure auth policy
auth.settings.registration_requires_verification = False
auth.settings.registration_requires_approval = False
auth.settings.reset_password_requires_verification = True
